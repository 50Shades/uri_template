= URITemplate - a uri template library

{<img src="https://secure.travis-ci.org/hannesg/uri_template.png" />}[http://travis-ci.org/uri_template/uri_template] {<img src="https://gemnasium.com/hannesg/uri_template.png" />}[https://gemnasium.com/hannesg/uri_template]

With URITemplate you can generate URI based on simple templates. The current implementation is based on draft 7 of the uri template spec ( http://tools.ietf.org/html/draft-gregorio-uritemplate-07 ). For the syntax read that spec. Draft 2 of that specification is implemented as addressable gem.

It's currently planed to add newer versions of that spec when they emerge. Therefore the module URITemplate just defines one abstract method ( expand ) and some methods to access the actual implementations.

Some implementations might be able to extract variables, too ( Draft 7 is! ).

From version 0.2.0, it will use escape_utils if available. This will significantly boost uri-escape/unescape performance if more characters need to be escaped ( may be slightly slower in trivial cases. working on that ... ), but does not run everywhere. To enable this, do the following:

````ruby
  # escape_utils has to be loaded when uri_templates is loaded
  gem 'escape_utils'
  require 'escape_utils'
  
  gem 'uri_template'
  require 'uri_template'
  
  UriTemplate::Utils.using_escape_utils? #=> true

== Examples

  require 'uri_template'
  
  tpl = URITemplate.new('http://{host}{/segments*}/{file}{.extensions*}')
  
  # This will give: http://www.host.com/path/to/a/file.x.y
  tpl.expand('host'=>'www.host.com','segments'=>['path','to','a'],'file'=>'file','extensions'=>['x','y'])
  
  # This will give: { 'host'=>'www.host.com','segments'=>['path','to','a'],'file'=>'file','extensions'=>['x','y']}
  tpl.extract('http://www.host.com/path/to/a/file.x.y')
  
  
== Benchmarks

 * System: Core 2 Duo T9300, 4 gb ram, Fedora 16 64 bit, ruby 1.9.3, 100_000 repetitions
 * Implementation: Draft7 ( version 0.1.3 (pre) ) vs. Addressable ( 2.2.6 )
 * Results marked with * means that the template object is reused.

                                                       Addressable | Addressable* |  Draft7 | Draft7* |
    --Expansion----------------------------------------------------------------------------------------
    Empty string                                             8.601 |        8.529 |   0.451 |   0.057 |
    One simple variable                                     19.832 |       19.675 |   2.746 |   0.928 |
    One escaped variable                                    22.437 |       22.151 |   6.011 |   4.242 |
    One missing variable                                     9.638 |        9.544 |   1.855 |   0.184 |
    Path segments                                           25.353 |       25.413 |   3.171 |   1.372 |
    Arguments                                               27.140 |       27.144 |   5.293 |   2.715 |
    Full URI                                                75.599 |       75.680 |  11.147 |   5.246 |
    Segments and Arguments                                  73.360 |       73.334 |   7.694 |   3.604 |
    --Extraction---------------------------------------------------------------------------------------
    Empty string                                            14.031 |       13.993 |   1.849 |   0.576 |
    One simple variable                                     28.701 |       28.503 |   6.988 |   1.840 |
    One escaped variable                                    33.237 |       33.358 |   8.354 |   3.155 |
    One missing variable                                    17.201 |       17.051 |   6.318 |   1.177 |
    Path segments                                           43.112 |       43.623 |  12.502 |   2.983 |
    Arguments                                               54.448 |       54.090 |  13.772 |   3.394 |
    Full URI                                                95.433 |       91.961 |  30.762 |   6.797 |
    Segments and Arguments                                  80.508 |       79.570 |  23.204 |   5.210 |
    Segments and Arguments ( not extractable )              22.079 |       21.967 |  18.017 |   0.256 |

SUCCESS - Draft7 was faster in every test!

